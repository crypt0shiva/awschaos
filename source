
---- Auto Slime ----

local isAutoSlimeEnabled = false
local persistentIndex = nil
local pettoslime = "" -- Define pettoslime in a broader scope

-- Function to reset the persistent index
local function resetPersistentIndex()
    persistentIndex = nil
end

-- Function to check if the current pet index matches the persistent index
local function shouldReslime(currentIndex)
    return persistentIndex and currentIndex == persistentIndex
end

-- Main function to run the auto slimer
local function autoSlime()
    local Playerz = game:GetService("Players")
    local localPlayerz = Playerz.LocalPlayer

    repeat
        local args = {
            [1] = localPlayerz
        }

        local OwnedPets = game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.getOwned:InvokeServer(unpack(args))

        if OwnedPets then
            for idx, pet in pairs(OwnedPets) do
                local displayName = pet.DisplayName
                local locked = pet.Locked
                local slime = pet.Slime
                local key = pet.Key
                local size = pet.CraftType

                if key == pettoslime and size == "Goliath" and slime ~= "Red" then
                    print("displayName:", pettoslime, "| Slime:", slime)

                    if slime == nil then 
                        local args = {
                            [1] = idx
                        }
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PetDeslimeService.RE.onPurchase:FireServer(unpack(args))
                        wait(.1)
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.slimify:InvokeServer(unpack(args))
                        print("Sliming...")
                        wait(1)
                        persistentIndex = idx
                    elseif slime ~= "Red" then
                        local args = {
                            [1] = idx
                        }

                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PetDeslimeService.RE.onPurchase:FireServer(unpack(args))
                        print("Desliming...")

                        local countdown = 180
                        while countdown > 0 do
                            print("Remaining time:", countdown, "seconds")
                            wait(10)
                            countdown = countdown - 10
                        end
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PetDeslimeService.RE.onClaim:FireServer()
                    end
                elseif shouldReslime(idx) then
                    local args = {
                        [1] = idx
                    }

                    game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.slimify:InvokeServer(unpack(args))
                    print("Resliming...")
                    wait(1)
                    resetPersistentIndex()
                else
                    -- Handle other cases or leave it empty if no specific action is needed.
                end
            end
        else
            print("OwnedPets is nil.")
        end
    until persistentIndex == nil
end

-- Function to toggle auto slimer
local function toggleAutoSlime()
    isAutoSlimeEnabled = not isAutoSlimeEnabled -- Toggle the state
    
    if isAutoSlimeEnabled then
        print("Auto Slime enabled!")
        autoSlime() -- Start the auto slime functionality
    else
        print("Auto Slime disabled.")
    end
end

---- Auto Slime ----

---------- Auto Farming -----------
local isFarmingToggled = false
local seedsToPlant = ""
local function toggleAutoFarming()
    local isPlanting = true
    isFarmingToggled = not isFarmingToggled
    
    if isFarmingToggled then
        print("Auto Farm: On")
        -- Add your code to start the farming script
        coroutine.wrap(function()
            while isFarmingToggled do
                for i = 1, 6 do
                    local args
                    if isPlanting then
                        args = {
                            [1] = seedsToPlant,
                            [2] = "1",
                            [3] = tostring(i)
                        }
                        wait(0.5)
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ItemPlantingService.RF.Plant:InvokeServer(unpack(args))
                    else
                        args = {
                            [1] = tostring(i)
                        }
                        wait(0.1)
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ItemPlantingService.RF.Harvest:InvokeServer(unpack(args))
                    end
                end
                isPlanting = not isPlanting
            end
        end)()
    else
        print("Auto Farm: Off")
        -- Add your code to stop the farming script
    end
end
---------- Auto Farming -----------

---------------------------- GUI --------------------------------




local Finity = loadstring(game:HttpGet("https://raw.githubusercontent.com/LocalSmail/Finity/main/Library"))()

local FinityWindow = Finity.new("Arm Wrestling Simulator Admin Menu", true, false, "", true, "")

local AutoFarmCategory = FinityWindow:Category("Auto-Farm")

local AutoFarmSettings = AutoFarmCategory:Sector("Plant and Harvest") -- Adds sections inside the category, Name Optional

local PlantedSeeds = AutoFarmSettings:Cheat("dropdown", "Select Seed Type", function(seedsInput)
seedsToPlant = seedsInput
print(seedsToPlant)
end, { options = {"Apple Seeds", "Banana Seeds", "DragonFruit Seeds","Pear Seeds"}, default = "Apple" })

AutoFarmSettings:Cheat("Checkbox", "Toggle AutoFarm", toggleAutoFarming)

local AutoSlimeCategory = FinityWindow:Category("Auto-Slime")

local AutoSlimeSettings = AutoSlimeCategory:Sector("Enter Pet Name") -- Adds sections inside the category, Name Optional
local SlimePetName = AutoSlimeSettings:Cheat("Textbox", "Pet Name", function(petslimeinput)
    pettoslime = petslimeinput -- Set the global variable pettoslime
    print(pettoslime)
end, { placeholder = "Dominus" })

AutoSlimeSettings:Cheat("Checkbox", "Toggle AutoSlime", toggleAutoSlime)

---------------------------- GUI --------------------------------
