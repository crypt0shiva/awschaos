
---- Auto Slime ----

local isAutoSlimeEnabled = false
local persistentIndex = nil
local pettoslime = "" -- Define pettoslime in a broader scope

-- Function to reset the persistent index
local function resetPersistentIndex()
    persistentIndex = nil
end

-- Function to check if the current pet index matches the persistent index
local function shouldReslime(currentIndex)
    return persistentIndex and currentIndex == persistentIndex
end

-- Main function to run the auto slimer
local function autoSlime()
    local Playerz = game:GetService("Players")
    local localPlayerz = Playerz.LocalPlayer

    repeat
        local args = {
            [1] = localPlayerz
        }

        local OwnedPets = game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.getOwned:InvokeServer(unpack(args))

        if OwnedPets then
            for idx, pet in pairs(OwnedPets) do
                local displayName = pet.DisplayName
                local locked = pet.Locked
                local slime = pet.Slime
                local key = pet.Key
                local size = pet.CraftType

                if key == pettoslime and size == "Goliath" and slime ~= "Red" then
                    print("displayName:", pettoslime, "| Slime:", slime)

                    if slime == nil then 
                        local args = {
                            [1] = idx
                        }
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PetDeslimeService.RE.onPurchase:FireServer(unpack(args))
                        wait(.1)
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.slimify:InvokeServer(unpack(args))
                        print("Sliming...")
                        wait(1)
                        persistentIndex = idx
                    elseif slime ~= "Red" then
                        local args = {
                            [1] = idx
                        }

                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PetDeslimeService.RE.onPurchase:FireServer(unpack(args))
                        print("Desliming...")

                        local countdown = 180
                        while countdown > 0 do
                            print("Remaining time:", countdown, "seconds")
                            wait(10)
                            countdown = countdown - 10
                        end
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PetDeslimeService.RE.onClaim:FireServer()
                    end
                elseif shouldReslime(idx) then
                    local args = {
                        [1] = idx
                    }

                    game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.slimify:InvokeServer(unpack(args))
                    print("Resliming...")
                    wait(1)
                    resetPersistentIndex()
                else
                    -- Handle other cases or leave it empty if no specific action is needed.
                end
            end
        else
            print("OwnedPets is nil.")
        end
    until persistentIndex == nil
end

-- Function to toggle auto slimer
local function toggleAutoSlime()
    isAutoSlimeEnabled = not isAutoSlimeEnabled -- Toggle the state
    
    if isAutoSlimeEnabled then
        print("Auto Slime enabled!")
        autoSlime() -- Start the auto slime functionality
    else
        print("Auto Slime disabled.")
    end
end

---- Auto Slime ----

---------- Auto Farming -----------
local isFarmingToggled = false
local seedsToPlant = ""
local function toggleAutoFarming()
    local isPlanting = true
    isFarmingToggled = not isFarmingToggled
    
    if isFarmingToggled then
        print("Auto Farm: On")
        -- Add your code to start the farming script
        coroutine.wrap(function()
            while isFarmingToggled do
                for i = 1, 6 do
                    local args
                    if isPlanting then
                        args = {
                            [1] = seedsToPlant,
                            [2] = "1",
                            [3] = tostring(i)
                        }
                        wait(0.5)
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ItemPlantingService.RF.Plant:InvokeServer(unpack(args))
                    else
                        args = {
                            [1] = tostring(i)
                        }
                        wait(0.1)
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ItemPlantingService.RF.Harvest:InvokeServer(unpack(args))
                    end
                end
                isPlanting = not isPlanting
            end
        end)()
    else
        print("Auto Farm: Off")
        -- Add your code to stop the farming script
    end
end
---------- Auto Farming -----------



--------- Auto Snacking ----------
local snacksToCraft = ""
local isAutoSnackToggled = false
local function toggleAutoSnackCrafting()
    isAutoSnackToggled = not isAutoSnackToggled
    
    if isAutoSnackToggled then
        print("Auto Snack Crafting: On")
        coroutine.wrap(function()
            while isAutoSnackToggled do
                for i = 1, 3 do
                    local args = {
                        [1] = {
                            ["Item"] = snacksToCraft,
                            ["Tier"] = 1
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ItemCraftingService.RF.UpgradeSnack:InvokeServer(unpack(args))
                    
                    local args = {
                        [1] = {
                            ["Item"] = "Apple",
                            ["Tier"] = 2
                        }
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ItemCraftingService.RF.UpgradeSnack:InvokeServer(unpack(args))
                    
                end
            end
        end)()
    else
        print("Auto Snack Crafting: Off")
    end
end
--------- Auto Snacking ----------

-------- Auto Merchant --------
local isAutoMerchantToggled = false
local function toggleAutoMerchant()
    isAutoMerchantToggled = not isAutoMerchantToggled
    
    if isAutoMerchantToggled then
        print("Auto Merchant: On")
        coroutine.wrap(function()
            while isAutoMerchantToggled do
                for i = 1, 1 do
                    local args = {
                        [1] = "Farmer",
                        [2] = 2
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.MerchantService.RF.BuyItem:InvokeServer(unpack(args))
                    wait(1)
                end
            end
        end)()
    else
        print("Auto Merchant: Off")
    end
end
-------- Auto Merchant --------


------- Auto Fighting -------- 

local isAutoFightToggled = false
local function toggleAutoFight()
    isAutoFightToggled = not isAutoFightToggled

    if isAutoFightToggled then
        print("Auto Fight: On")
        -- Add your code to start the auto fight script
        coroutine.wrap(function()
            while isAutoFightToggled do
                    local args1 = {
                        [1] = {
                        ["Value"] = "Rogue",
                        ["AutoType"] = "AutoFight",
                        ["Value2"] = "8"
                   }
                  }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.IdleTeleportService.RF.SetLatestTeleportData:InvokeServer(unpack(args1))

                local args2 = {
                    [1] = "Rogue",
                    [2] = workspace.GameObjects.ArmWrestling:FindFirstChild("8").NPC.Rogue.Table,
                    [3] = "8"
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args2))
                
                wait(3)

                for i = 1, 25 do
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
                    wait(.1)
                end
            end
        end)()
    else
        print("Auto Fight: Off")
        -- Add your code to stop the auto fight script
    end
end

------- Auto Fighting -------- 


---- Auto Hatch ----

local function hatchMythLegend()
    local args = {
        [1] = "Blackhole",
        [2] = {
            ["GrassMage"] = true,
            ["MagicMage"] = true,
            ["Spooky"] = true,
            ["WaterMage"] = true
        },
        [4] = false,
        [5] = true
    }
    
    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
    end
    
    
    local function hatchRare()
    local args = {
        [1] = "Icy",
        [2] = {
            ["Fox"] = true,
            ["Bear"] = true,
            ["Slime"] = true,
            ["Deer"] = true,
            ["Squirrel"] = true
        },
        [4] = false,
        [5] = true
    }
    
    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
    game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
    end

    

local ishatchMythLegendToggled = false
local function toggleMythLegendHatch()
    ishatchMythLegendToggled = not ishatchMythLegendToggled

    if ishatchMythLegendToggled then
        print("Auto Hatch Mythic and Legend: On")
        coroutine.wrap(function()
            while ishatchMythLegendToggled do
                hatchMythLegend()
            end
        end)()
    else
        print("Auto Hatch Mythic and Legend: Off")
    end
end

local ishatchMythRareToggled = false
local function toggleRareHatch()
    ishatchRareToggled = not ishatchRareToggled

    if ishatchRareToggled then
        print("Auto Hatch Rare: On")
        coroutine.wrap(function()
            while ishatchRareToggled do
                hatchRare()
            end
        end)()
    else
        print("Auto Hatch Rare: Off")
    end
end


local ishatchBothToggled = false
local function toggleBothHatch()
    ishatchBothToggled = not ishatchBothToggled

    if ishatchBothToggled then
        print("Auto Hatch Rare: On")
        coroutine.wrap(function()
            while ishatchBothToggled do
                hatchRare()
                hatchMythLegend()
            end
        end)()
    else
        print("Auto Hatch Rare: Off")
    end
end

----- Auto Hatch ----

---------------------------- GUI --------------------------------




local Finity = loadstring(game:HttpGet("https://raw.githubusercontent.com/LocalSmail/Finity/main/Library"))()

local FinityWindow = Finity.new("Arm Wrestling Simulator Admin Menu", true, false, "", true, "")


-- Auto Farm Gui --
local AutoFarmCategory = FinityWindow:Category("Auto-Farm")

local AutoFarmSettings = AutoFarmCategory:Sector("") -- Adds sections inside the category, Name Optional

-- Merchant --
AutoFarmSettings:Cheat("Checkbox", "Toggle AutoMerchant", toggleAutoMerchant)

-- Seeds --
local PlantedSeeds = AutoFarmSettings:Cheat("dropdown", "Select Seed Type", function(seedsInput)
seedsToPlant = seedsInput
print(seedsToPlant)
end, { options = {"Apple Seeds", "Banana Seeds", "DragonFruit Seeds","Pear Seeds"}, default = "Apple Seeds" })

AutoFarmSettings:Cheat("Checkbox", "Toggle AutoFarm", toggleAutoFarming)

-- Snacks --
local CraftedSnacks = AutoFarmSettings:Cheat("dropdown", "Select Snack Type", function(snackInput)
    snacksToCraft = snackInput
    print(snacksToCraft)
    end, { options = {"Apple", "Banana", "DragonFruit","Pear"}, default = "Apple" })
    
    AutoFarmSettings:Cheat("Checkbox", "Toggle AutoSnack", toggleAutoSnackCrafting)



-- Auto Slime Gui --
local AutoSlimeCategory = FinityWindow:Category("Auto-Slime")

local AutoSlimeSettings = AutoSlimeCategory:Sector("") -- Adds sections inside the category, Name Optional
local SlimePetName = AutoSlimeSettings:Cheat("Textbox", "Pet Name", function(petslimeinput)
    pettoslime = petslimeinput -- Set the global variable pettoslime
    print(pettoslime)
end, { placeholder = "Dominus" })

AutoSlimeSettings:Cheat("Checkbox", "Toggle AutoSlime", toggleAutoSlime)


--- Auto Fight ----

local AutoFightCategory = FinityWindow:Category("Auto-Fight")

local AutoFightSettings = AutoFightCategory:Sector("") -- Adds sections inside the category, Name Optional

local bosses = AutoFightSettings:Cheat("dropdown", "Select Boss", function(bossInput)
    bossToFight = bossInput
    print(bossToFight)
    end, { options = {"W3","W4","W5","W6","W7B1","W7B2","W7B3","W7B4","W7B5","W8B1","W8B2","W8B3","WvB4","W8B5","W9"}, default = "" })

AutoFightSettings:Cheat("Checkbox", "Toggle AutoFight", toggleAutoFight)


--- Auto Hatch ----

local AutoHatchCategory = FinityWindow:Category("Auto-Hatch")

local AutoHatchSettings = AutoHatchCategory:Sector("") -- Adds sections inside the category, Name Optional

AutoHatchSettings:Cheat("Checkbox", "Toggle AutoHatch Legend/Myth", toggleMythLegendHatch)
AutoHatchSettings:Cheat("Checkbox", "Toggle AutoHatch Rare", toggleRareHatch)
AutoHatchSettings:Cheat("Checkbox", "Toggle AutoHatch Both", toggleBothHatch)

---------------------------- GUI --------------------------------



